package controller.product;

import controller.BaseController;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Shops;
import model.SystemConfigs;
import model.view.ConversationMessageView;
import model.view.CustomerProfileView;
import model.view.MarketplaceSummary;
import model.view.product.ProductSummaryView;
import service.HomepageService;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ƒêi·ªÅu ph·ªëi lu·ªìng "Trang ch·ªß" d√†nh cho kh√°ch truy c·∫≠p.
 * <p>
 * - Hi·ªÉn th·ªã s·∫£n ph·∫©m n·ªïi b·∫≠t, danh m·ª•c ch√≠nh v√† th√¥ng tin t·ªïng quan th·ªã
 * tr∆∞·ªùng. - Cung c·∫•p d·ªØ li·ªáu shop, FAQ v√† th√¥ng ƒëi·ªáp gi√∫p ng∆∞·ªùi m·ªõi n·∫Øm ƒë∆∞·ª£c
 * b·ª©c tranh chung. - Chu·∫©n b·ªã b·ªô l·ªçc m·∫∑c ƒë·ªãnh ƒë·ªÉ ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu h√†nh tr√¨nh
 * t√¨m s·∫£n ph·∫©m.
 *
 * @version 1.0 27/05/2024
 * @author hoaltthe176867
 */
@WebServlet(name = "HomepageController", urlPatterns = {"/home"})
public class HomepageController extends BaseController {

    // M√£ phi√™n b·∫£n ph·ª•c v·ª• tu·∫ßn t·ª± h√≥a servlet.
    private static final long serialVersionUID = 1L;

    // D·ªãch v·ª• t·ªïng h·ª£p d·ªØ li·ªáu cho trang ch·ªß (s·∫£n ph·∫©m, shop, th√¥ng b√°o...).
    private final HomepageService homepageService = new HomepageService();

    // ƒê√≥n y√™u c·∫ßu GET t·ªõi trang ch·ªß v√† chu·∫©n b·ªã d·ªØ li·ªáu hi·ªÉn th·ªã.
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setAttribute("pageTitle", "Ch·ª£ t√†i kho·∫£n MMO - Trang ch·ªß");
        request.setAttribute("bodyClass", "layout layout--landing");

        populateHomepageData(request);

        request.setAttribute("query", "");
        request.setAttribute("selectedType", "");
        request.setAttribute("selectedSubtype", "");

        forward(request, response, "product/home");
    }

    // T·∫£i to√†n b·ªô d·ªØ li·ªáu c·∫ßn thi·∫øt cho trang ch·ªß v√† g√°n v√†o request.
    private void populateHomepageData(HttpServletRequest request) {
        MarketplaceSummary summary = homepageService.loadMarketplaceSummary();
        request.setAttribute("summary", summary);

        List<ProductSummaryView> featuredProducts = homepageService.loadFeaturedProducts();
        request.setAttribute("featuredProducts", featuredProducts);

        List<Shops> shops = homepageService.loadActiveShops();
        request.setAttribute("shops", shops);
        request.setAttribute("shopIcons", buildShopIconMap());

        request.setAttribute("productCategories", homepageService.loadProductCategories());

        CustomerProfileView profile = homepageService.loadHighlightedBuyer();
        request.setAttribute("customerProfile", profile);

        List<ConversationMessageView> messages = homepageService.loadRecentMessages();
        request.setAttribute("recentMessages", messages);

        List<SystemConfigs> systemNotes = homepageService.loadSystemNotes();
        request.setAttribute("systemNotes", systemNotes);

        request.setAttribute("faqs", buildFaqEntries());
        request.setAttribute("typeOptions", homepageService.loadFilterTypeOptions());
    }

    // X√¢y d·ª±ng b·ªô √°nh x·∫° tr·∫°ng th√°i shop sang bi·ªÉu t∆∞·ª£ng hi·ªÉn th·ªã nhanh.
    private Map<String, String> buildShopIconMap() {
        Map<String, String> icons = new HashMap<>();
        icons.put("Active", "üõçÔ∏è");
        icons.put("Pending", "‚è≥");
        icons.put("Suspended", "‚ö†Ô∏è");
        return icons;
    }

    // Chu·∫©n b·ªã danh s√°ch c√¢u h·ªèi th∆∞·ªùng g·∫∑p hi·ªÉn th·ªã tr√™n trang ch·ªß.
    private List<Map<String, String>> buildFaqEntries() {
        List<Map<String, String>> faqs = new ArrayList<>();

        faqs.add(createEntry("L√†m sao ƒë·ªÉ mua t√†i kho·∫£n an to√†n?",
                "H√£y ki·ªÉm tra tr·∫°ng th√°i duy·ªát v√† ch·ªâ thanh to√°n qua k√™nh ƒë∆∞·ª£c h·ªó tr·ª£ trong h·ªá th·ªëng."));
        faqs.add(createEntry("T√¥i c√≥ th·ªÉ y√™u c·∫ßu ho√†n ti·ªÅn kh√¥ng?",
                "Ng∆∞·ªùi mua c√≥ th·ªÉ m·ªü khi·∫øu n·∫°i trong v√≤ng 24 gi·ªù sau khi nh·∫≠n t√†i kho·∫£n."));
        faqs.add(createEntry("V√≠ ƒëi·ªán t·ª≠ ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
                "V√≠ cho ph√©p n·∫°p ti·ªÅn nhanh, thanh to√°n t·ª©c th√¨ v√† theo d√µi l·ªãch s·ª≠ giao d·ªãch."));
        faqs.add(createEntry("Seller c·∫ßn chu·∫©n b·ªã g√¨ ƒë·ªÉ ƒëƒÉng b√°n?",
                "H√£y x√°c minh danh t√≠nh KYC v√† cung c·∫•p m√¥ t·∫£ chi ti·∫øt cho t·ª´ng s·∫£n ph·∫©m."));

        return faqs;
    }

    // T·∫°o m·ªôt ph·∫ßn t·ª≠ FAQ bao g·ªìm ti√™u ƒë·ªÅ v√† m√¥ t·∫£.
    private Map<String, String> createEntry(String title, String description) {
        Map<String, String> entry = new HashMap<>();
        entry.put("title", title);
        entry.put("description", description);
        return entry;
    }
}
