package controller.product;

import controller.BaseController;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Shops;
import model.SystemConfigs;
import model.view.ConversationMessageView;
import model.view.CustomerProfileView;
import model.view.MarketplaceSummary;
import model.view.product.ProductSummaryView;
import service.HomepageService;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Handles requests for the public facing homepage where visitors discover
 * available account products.
 */
@WebServlet(name = "HomepageController", urlPatterns = {"/home"})
public class HomepageController extends BaseController {

    private static final long serialVersionUID = 1L;

    private static final Logger LOGGER = Logger.getLogger(HomepageController.class.getName());
    private final HomepageService homepageService = new HomepageService();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setAttribute("pageTitle", "Ch·ª£ t√†i kho·∫£n MMO - Trang ch·ªß");
        request.setAttribute("bodyClass", "layout layout--landing");
//        request.setAttribute("headerTitle", "MMO Trader Market");
//        request.setAttribute("headerSubtitle", "N·ªÅn t·∫£ng demo mua b√°n t√†i kho·∫£n an to√†n");

        populateHomepageData(request);

        request.setAttribute("query", "");
        request.setAttribute("q", "");
        request.setAttribute("selectedType", "");
        request.setAttribute("selectedSubtype", "");

        forward(request, response, "product/home");
    }

    private void populateHomepageData(HttpServletRequest request) {
        MarketplaceSummary summary = homepageService.loadMarketplaceSummary();
        request.setAttribute("summary", summary);

        List<ProductSummaryView> featuredProducts = homepageService.loadFeaturedProducts();
        LOGGER.log(Level.INFO, "[HomepageController] featuredCount={0}, firstId={1}",
                new Object[]{featuredProducts.size(),
                        featuredProducts.isEmpty() ? null : featuredProducts.get(0).getId()});
        request.setAttribute("featured", featuredProducts);

        Map<String, ProductSummaryView> topBySubtype = homepageService.loadTopProductsBySubtype();
        request.setAttribute("topBySubtype", topBySubtype);

        List<Shops> shops = homepageService.loadActiveShops();
        request.setAttribute("shops", shops);
        request.setAttribute("shopIcons", buildShopIconMap());

        CustomerProfileView profile = homepageService.loadHighlightedBuyer();
        request.setAttribute("customerProfile", profile);

        List<ConversationMessageView> messages = homepageService.loadRecentMessages();
        request.setAttribute("recentMessages", messages);

        List<SystemConfigs> systemNotes = homepageService.loadSystemNotes();
        request.setAttribute("systemNotes", systemNotes);

        request.setAttribute("faqs", buildFaqEntries());
        request.setAttribute("typeOptions", homepageService.loadFilterTypeOptions());
        request.setAttribute("subtypes", List.of());
    }

    private Map<String, String> buildShopIconMap() {
        Map<String, String> icons = new HashMap<>();
        icons.put("Active", "üõçÔ∏è");
        icons.put("Pending", "‚è≥");
        icons.put("Suspended", "‚ö†Ô∏è");
        return icons;
    }

    private List<Map<String, String>> buildFaqEntries() {
        List<Map<String, String>> faqs = new ArrayList<>();

        faqs.add(createEntry("L√†m sao ƒë·ªÉ mua t√†i kho·∫£n an to√†n?",
                "H√£y ki·ªÉm tra tr·∫°ng th√°i duy·ªát v√† ch·ªâ thanh to√°n qua k√™nh ƒë∆∞·ª£c h·ªó tr·ª£ trong h·ªá th·ªëng."));
        faqs.add(createEntry("T√¥i c√≥ th·ªÉ y√™u c·∫ßu ho√†n ti·ªÅn kh√¥ng?",
                "Ng∆∞·ªùi mua c√≥ th·ªÉ m·ªü khi·∫øu n·∫°i trong v√≤ng 3 ng√†y sau khi nh·∫≠n t√†i kho·∫£n."));
        faqs.add(createEntry("V√≠ ƒëi·ªán t·ª≠ ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
                "V√≠ cho ph√©p n·∫°p ti·ªÅn nhanh, thanh to√°n t·ª©c th√¨ v√† theo d√µi l·ªãch s·ª≠ giao d·ªãch."));
        faqs.add(createEntry("Ng∆∞·ªùi b√°n c·∫ßn chu·∫©n b·ªã g√¨ ƒë·ªÉ ƒëƒÉng b√°n?",
                "H√£y x√°c minh danh t√≠nh KYC v√† cung c·∫•p m√¥ t·∫£ chi ti·∫øt cho t·ª´ng s·∫£n ph·∫©m."));

        return faqs;
    }

    private Map<String, String> createEntry(String title, String description) {
        Map<String, String> entry = new HashMap<>();
        entry.put("title", title);
        entry.put("description", description);
        return entry;
    }
}
